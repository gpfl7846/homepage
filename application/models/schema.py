from application import db

class Match(db.Model):
	pk 			= db.Column(db.Integer, primary_key=True)
	date		= db.Column(db.DateTime)
	round_pk	= db.Column(db.Integer, db.ForeignKey('round.pk'))
	round 		= db.relationship('Round',backref= db.backref('matches', cascade='all,delete-orphan', lazy='dynamic'))
	win_team_pk	= db.Column(db.Integer, db.ForeignKey('team.pk'), nullable=True)
	win_team 	= db.relationship('Team')
	goal_point 	= db.Column(db.Integer, nullable=True)
	location	= db.Column(db.String(50))
 	
 	referee_team_pk = db.Column(db.Integer)
	referee_pk  = db.Column(db.Integer, db.ForeignKey('player.pk'))
	referee 	= db.relationship('Player',foreign_keys=[referee_pk])
	assistant_referee_1_pk = db.Column(db.Integer, db.ForeignKey('player.pk'))
	assistant_referee_1    = db.relationship('Player',foreign_keys=[assistant_referee_1_pk])
	assistant_referee_2_pk = db.Column(db.Integer, db.ForeignKey('player.pk'), nullable=True)
	assistant_referee_2    = db.relationship('Player',foreign_keys=[assistant_referee_2_pk])
	fourth_official_pk 	   = db.Column(db.Integer, db.ForeignKey('player.pk'), nullable=True)
	fourth_official 	   = db.relationship('Player',foreign_keys=[fourth_official_pk])

class Round(db.Model):
	pk 			= db.Column(db.Integer, primary_key=True)
	round 		= db.Column(db.Integer)
	season 		= db.Column(db.Integer, nullable=True)
	league 		= db.Column(db.Integer, nullable=True)

class Review(db.Model):
	pk 			= db.Column(db.Integer, primary_key=True)
	body		= db.Column(db.Text())
	round_pk	= db.Column(db.Integer,  db.ForeignKey('round.pk'))
	round 		= db.relationship('Round', backref= db.backref('reviews', cascade='all,delete-orphan', lazy='dynamic'))
	user_pk		= db.Column(db.Integer, db.ForeignKey('player.pk'))
	user 		= db.relationship('Player')
	created_time= db.Column(db.DateTime, default=db.func.now())

class Match_team(db.Model):
	pk 			= db.Column(db.Integer, primary_key=True)
	match_pk	= db.Column(db.Integer, db.ForeignKey('match.pk'))
	match 		= db.relationship('Match',backref= db.backref('match_teams', cascade='all,delete-orphan', lazy='dynamic'))
	team_pk		= db.Column(db.Integer, db.ForeignKey('team.pk'))
	team 		= db.relationship('Team')
	team_goal 	= db.Column(db.Integer,nullable=True)

class Match_result(db.Model):
	pk 			= db.Column(db.Integer, primary_key=True)
	match_pk	= db.Column(db.Integer, db.ForeignKey('match.pk'))
	match 		= db.relationship('Match',backref= db.backref('match_results', cascade='all,delete-orphan', lazy='dynamic'))
	time 		= db.Column(db.Integer)
	team_pk		= db.Column(db.Integer, db.ForeignKey('team.pk'))
	team 		= db.relationship('Team')
	player_pk	= db.Column(db.Integer, db.ForeignKey('player.pk'))
	player 		= db.relationship('Player')
	status_pk	= db.Column(db.Integer, db.ForeignKey('status.pk'))
	status 		= db.relationship('Status')
	
class Match_goal(db.Model):
	pk 			= db.Column(db.Integer, primary_key=True)
	goal_time 	= db.Column(db.Integer)
	match_pk 	= db.Column(db.Integer, db.ForeignKey('match.pk'))
	match 		= db.relationship('Match')
	player_pk	= db.Column(db.Integer, db.ForeignKey('player.pk'))
	player 		= db.relationship('Player')
	# match_player_pk = db.Column(db.Integer, db.ForeignKey('match_player.pk'))
	# match_player 	= db.relationship('Match_player')

class Match_player(db.Model):
	pk 			= db.Column(db.Integer, primary_key=True)
	match_pk	= db.Column(db.Integer, db.ForeignKey('match.pk'))
	match 		= db.relationship('Match')
	player_pk	= db.Column(db.Integer, db.ForeignKey('player.pk'))
	position 	= db.Column(db.Enum('GK','DF','MF','FW'), nullable=True)
	player 		= db.relationship('Player')
	match_team_pk = db.Column(db.Integer, db.ForeignKey('match_team.pk'))
	match_team 	= db.relationship('Match_team', backref= db.backref('match_players', cascade='all,delete-orphan', lazy='dynamic'))
	player_goal	= db.Column(db.Integer)
	status_pk	= db.Column(db.Integer, db.ForeignKey('status.pk'))
	status 		= db.relationship('Status')
	yellow_card = db.Column(db.Integer,nullable=True)
	red_card 	= db.Column(db.Integer,nullable=True)

class Status(db.Model):
	pk 			= db.Column(db.Integer, primary_key=True)
	status 		= db.Column(db.String(100))

class Team(db.Model):
	pk 			= db.Column(db.Integer, primary_key=True)
	name 		= db.Column(db.String(50))
	# captain_pk 	= db.Column(db.Integer, db.ForeignKey('player.pk'))
	# captain 	= db.relationship('Player', foreign_keys=[captain_pk])
	college		= db.Column(db.String(50))
	point 		= db.Column(db.Integer, default='0')
	win 		= db.Column(db.Integer, default='0')
	lose 		= db.Column(db.Integer, default='0')
	draw 		= db.Column(db.Integer, default='0')
	goal_difference 	= db.Column(db.Integer, default='0')
	team_match_count 	= db.Column(db.Integer, default='0')
	team_img 	= db.Column(db.String(100))
	league		= db.Column(db.String(20))
	goals_against = db.Column(db.Integer, default='0') 
	goals_for 	= db.Column(db.Integer, default='0')

class Player(db.Model):
	pk 			= db.Column(db.Integer, primary_key=True)
	team_pk		= db.Column(db.Integer, db.ForeignKey('team.pk'))
	team 		= db.relationship('Team', backref= db.backref('players', cascade='all,delete-orphan', lazy='dynamic'))
	player_name = db.Column(db.String(50))
	profile_img = db.Column(db.String(100), default='profile_default.png')
	major 		= db.Column(db.String(30))
	college		= db.Column(db.String(50), nullable=True)
	student_id	= db.Column(db.String(30))
	birthday	= db.Column(db.String(10))
	goal 		= db.Column(db.Integer, default='0')
	assist 		= db.Column(db.Integer, default='0')
	role		= db.Column(db.Enum('Player','Captain','Committee','Supporter','Admin'))
	phone		= db.Column(db.String(20))
	email		= db.Column(db.String(50))
	password 	= db.Column(db.String(50))
	position 	= db.Column(db.Enum('GK','DF','MF','FW'), nullable=True)
	uniform_number= db.Column(db.Integer, nullable=True)
	wildcard	= db.Column(db.Integer, nullable=True)

	yellow_card_count	= db.Column(db.Integer, default='0')
	red_card_count		= db.Column(db.Integer, default='0')
	limit_count			= db.Column(db.Integer, default='0')
	limit_of_participation	= db.Column(db.Integer, default='0')
	accumulate_limit_of_participation = db.Column(db.Integer, default='0')
	match_count_tmp		= db.Column(db.Integer, default='0')
	match_count 		= db.Column(db.Integer, default='0')
	auth_key	= db.Column(db.String(35))
	authorized 	= db.Column(db.Integer, default='0')


class college(db.Model):
	pk 			= db.Column(db.Integer, primary_key=True)
	university 	= db.Column(db.String(40))
	college		= db.Column(db.String(50))

class Ability(db.Model):
	pk			= db.Column(db.Integer, primary_key=True)
	player_pk 	= db.Column(db.Integer, db.ForeignKey('player.pk'))
	ability 	= db.relationship('Player', backref= db.backref('abilities', cascade='all,delete-orphan', lazy='dynamic'))
	shooting	= db.Column(db.Integer, default='0')
	passing 	= db.Column(db.Integer, default='0')
	dribble 	= db.Column(db.Integer, default='0')
	cross 		= db.Column(db.Integer, default='0')
	physical 	= db.Column(db.Integer, default='0')
	sum_point	= db.Column(db.Integer, default='15')

class Post(db.Model):
	pk			= db.Column(db.Integer, primary_key=True)
	post_img 	= db.Column(db.String(100))
	body		= db.Column(db.Text())
	created_time= db.Column(db.DateTime, default=db.func.now())
	edited_time = db.Column(db.DateTime, default=db.func.now(), onupdate=db.func.now())
	is_edited	= db.Column(db.Boolean, default='0', onupdate='1')
	is_secret	= db.Column(db.Boolean, default='0')
	user_pk		= db.Column(db.Integer, db.ForeignKey('player.pk'))
	user 		= db.relationship('Player',foreign_keys=[user_pk])
	wall_pk		= db.Column(db.Integer, db.ForeignKey('player.pk'))
	wall 		= db.relationship('Player',foreign_keys=[wall_pk], backref=db.backref('wall_posts', cascade='all,delete-orphan', lazy='dynamic'))

class Comment(db.Model):
	pk			= db.Column(db.Integer, primary_key=True)
	body		= db.Column(db.Text())
	created_time= db.Column(db.DateTime, default=db.func.now())
	post_pk		= db.Column(db.Integer,  db.ForeignKey('post.pk'))
	post 		= db.relationship('Post', backref= db.backref('comments', cascade='all,delete-orphan', lazy='dynamic'))
	user_pk		= db.Column(db.Integer, db.ForeignKey('player.pk'))
	user 		= db.relationship('Player')

class Follow(db.Model):
	pk 			=	db.Column(db.Integer, primary_key=True)
	follower_id =  	db.Column(db.Integer,db.ForeignKey('player.pk'))
	follower	=	db.relationship('Player', foreign_keys=[follower_id], backref=db.backref('followees', cascade='all, delete-orphan', lazy='dynamic'))
	followee_id =	db.Column(db.Integer,db.ForeignKey('player.pk'))
	followee 	=	db.relationship('Player', foreign_keys=[followee_id], backref=db.backref('followers', cascade='all, delete-orphan', lazy='dynamic'))

class Notification(db.Model):
	pk 			= 	db.Column(db.Integer, primary_key=True)
	type_pk 	= 	db.Column(db.Integer, db.ForeignKey('notification_type.pk'))
	type 		= 	db.relationship('Notification_type')
	sender_pk	= 	db.Column(db.Integer, db.ForeignKey('player.pk'))
	sender 		= 	db.relationship('Player', foreign_keys=[sender_pk])
	match_pk 	= 	db.Column(db.Integer, db.ForeignKey('match.pk'), nullable=True)
	match 		=	db.relationship('Match')
	receiver_pk =	db.Column(db.Integer, db.ForeignKey('player.pk'))  
	receiver 	=	db.relationship('Player', foreign_keys=[receiver_pk]) 
	send_time 	= 	db.Column(db.DateTime, default=db.func.now())
	read_time 	= 	db.Column(db.DateTime)
	confirm_time=	db.Column(db.DateTime)
	confirm 	= 	db.Column(db.Integer, nullable=True)
	read 		= 	db.Column(db.Integer, default='0')
	message		= 	db.Column(db.Text())
	title		=	db.Column(db.Text())
	key 		= 	db.Column(db.Integer, nullable=True)
	
class Notification_type(db.Model):
	pk 			=	db.Column(db.Integer, primary_key=True)
	type 		= 	db.Column(db.Text())
	deletable	=	db.Column(db.Integer, default='0')
	need_confirm=	db.Column(db.Integer, default='0')

class Password_change(db.Model):
	pk 			=	db.Column(db.Integer, primary_key=True)
	email 		= 	db.Column(db.String(50))
	time 		= 	db.Column(db.DateTime, default=db.func.now())
	key 		= 	db.Column(db.String(100))